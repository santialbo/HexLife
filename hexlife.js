// Generated by CoffeeScript 1.4.0
(function() {
  var HexLife, life;

  HexLife = (function() {

    HexLife.prototype.radius = 15;

    HexLife.prototype.apotema = null;

    HexLife.prototype.nrows = 20;

    HexLife.prototype.ncols = 12;

    HexLife.prototype.cells = null;

    HexLife.prototype.dt = 200;

    HexLife.prototype.timeout = null;

    HexLife.prototype.canvas = null;

    HexLife.prototype.toroidal = true;

    HexLife.prototype.context = null;

    HexLife.prototype.bl = 2;

    HexLife.prototype.bh = 3;

    HexLife.prototype.sl = 3;

    HexLife.prototype.sh = 4;

    function HexLife() {
      this.apotema = this.radius * Math.cos(30 * Math.PI / 180);
      this.refresh();
      this.hooks();
      this.createCells();
      this.drawCells();
    }

    HexLife.prototype.refresh = function() {
      this.createCanvas();
      this.resizeCanvas();
      return this.createDrawingContext();
    };

    HexLife.prototype.hooks = function() {
      var game;
      game = this;
      return this.canvas.addEventListener("click", (function(e) {
        return game.clickCanvasHandler(game, e);
      }));
    };

    HexLife.prototype.start = function() {
      var _this = this;
      return this.timeout = setInterval(function() {
        _this.update();
        return _this.drawCells();
      }, this.dt);
    };

    HexLife.prototype.pause = function() {
      return clearInterval(this.timeout);
    };

    HexLife.prototype.update = function() {
      var cells2, i, j, n, _i, _j, _ref, _ref1;
      cells2 = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.nrows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = this.ncols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push(this.cells[i][j]);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      for (i = _i = 0, _ref = this.nrows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = this.ncols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          n = this.sumneighbours(i, j);
          if (this.cells[i][j]) {
            cells2[i][j] = n >= this.sl && n <= this.sh;
          } else {
            cells2[i][j] = n >= this.bl && n <= this.bh;
          }
        }
      }
      return this.cells = cells2;
    };

    HexLife.prototype.createCanvas = function() {
      return this.canvas = document.getElementById('canvas');
    };

    HexLife.prototype.clickCanvasHandler = function(game, e) {
      var x, y;
      x = 0;
      y = 0;
      if (e.pageX || e.pageY) {
        x = e.pageX;
        y = e.pageY;
      } else {
        x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
      }
      x -= game.canvas.offsetLeft;
      y -= game.canvas.offsetTop;
      return game.clickCanvas(x, y);
    };

    HexLife.prototype.clickCanvas = function(x, y) {
      var cx, cy, dist, hi, hj, i, j, maxdist, _i, _j, _ref, _ref1;
      maxdist = 1e6;
      hi = 0;
      hj = 0;
      for (i = _i = 0, _ref = this.nrows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = this.ncols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          cy = this.apotema * (i + 1) - this.apotema;
          cx = this.radius + (2 * this.radius + this.apotema) * j + (i % 2 === 1 ? this.radius + this.apotema * 0.5 : 0) - (this.radius + this.apotema * 0.5);
          dist = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);
          if (dist < maxdist) {
            hi = i;
            hj = j;
            maxdist = dist;
          }
        }
      }
      this.cells[hi][hj] = !this.cells[hi][hj];
      return this.drawCells();
    };

    HexLife.prototype.resizeCanvas = function() {
      this.canvas.width = (this.radius * 2 + this.apotema) * this.ncols - this.apotema * 0.5 + this.radius;
      this.canvas.height = this.apotema * (this.nrows + 1);
      this.canvas.width -= this.radius * 2;
      return this.canvas.height -= this.apotema * 2;
    };

    HexLife.prototype.createDrawingContext = function() {
      return this.context = this.canvas.getContext('2d');
    };

    HexLife.prototype.createCells = function() {
      var i, j;
      return this.cells = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.nrows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = this.ncols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push(false);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
    };

    HexLife.prototype.drawCells = function() {
      var i, j, _i, _j, _k, _ref, _ref1, _ref2, _results;
      for (i = _i = 0, _ref = this.nrows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = this.ncols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (this.cells[i][j]) {
            this.fillCell(i, j, '#08C');
          } else {
            this.fillCell(i, j, '#BEF');
          }
        }
      }
      _results = [];
      for (i = _k = 0, _ref2 = this.nrows - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        _results.push((function() {
          var _l, _ref3, _results1;
          _results1 = [];
          for (j = _l = 0, _ref3 = this.ncols - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
            _results1.push(this.drawCell(i, j, '#FFF'));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    HexLife.prototype.fillCell = function(i, j, c) {
      var cx, cy, s, _i;
      this.context.fillStyle = c;
      cy = this.apotema * (i + 1);
      cx = this.radius + (2 * this.radius + this.apotema) * j + (i % 2 === 1 ? this.radius + this.apotema * 0.5 : 0);
      cx -= this.radius + this.apotema * 0.5;
      cy -= this.apotema;
      this.context.beginPath();
      this.context.moveTo(cx + this.radius, cy);
      for (s = _i = 1; _i <= 6; s = ++_i) {
        this.context.lineTo(cx + this.radius * Math.cos(s * 60 * Math.PI / 180), cy + this.radius * Math.sin(s * 60 * Math.PI / 180));
      }
      this.context.closePath();
      return this.context.fill();
    };

    HexLife.prototype.drawCell = function(i, j, c) {
      var cx, cy, s, _i;
      this.context.strokeStyle = c;
      this.context.lineWidth = 3;
      cy = this.apotema * (i + 1);
      cx = this.radius + (2 * this.radius + this.apotema) * j + (i % 2 === 1 ? this.radius + this.apotema * 0.5 : 0);
      cx -= this.radius + this.apotema * 0.5;
      cy -= this.apotema;
      this.context.beginPath();
      this.context.moveTo(cx + this.radius, cy);
      for (s = _i = 1; _i <= 6; s = ++_i) {
        this.context.lineTo(cx + this.radius * Math.cos(s * 60 * Math.PI / 180), cy + this.radius * Math.sin(s * 60 * Math.PI / 180));
      }
      this.context.closePath();
      return this.context.stroke();
    };

    HexLife.prototype.getneighbour = function(i, j) {
      if (!this.toroidal && (i < 0 || i >= this.nrows || j < 0 || j >= this.ncols)) {
        return false;
      }
      if (i < 0) {
        i += this.nrows;
      } else if (i >= this.nrows) {
        i -= this.nrows;
      }
      if (j < 0) {
        j += this.ncols;
      } else if (j >= this.ncols) {
        j -= this.ncols;
      }
      return this.cells[i][j];
    };

    HexLife.prototype.sumneighbours = function(i, j) {
      var sum;
      sum = (this.getneighbour(i - 2, j)) + (this.getneighbour(i + 2, j)) + (this.getneighbour(i + 1, j)) + (this.getneighbour(i - 1, j));
      if (i % 2 === 0) {
        sum += (this.getneighbour(i + 1, j - 1)) + (this.getneighbour(i - 1, j - 1));
      } else {
        sum += (this.getneighbour(i + 1, j + 1)) + (this.getneighbour(i - 1, j + 1));
      }
      return sum;
    };

    return HexLife;

  })();

  life = new HexLife();

  $('#play').click(function(e) {
    life.start();
    $('#play').attr('style', 'display: none;');
    $('#step').attr('style', 'display: none;');
    return $('#pause').attr('style', '');
  });

  $('#pause').click(function(e) {
    life.pause();
    $('#pause').attr('style', 'display: none;');
    $('#play').attr('style', '');
    return $('#step').attr('style', '');
  });

  $('#step').click(function(e) {
    life.update();
    return life.drawCells();
  });

  $('#toroidal').click(function(e) {
    life.toroidal = $(this).is(':checked');
    return console.log(life.toroidal);
  });

  $('#refresh').click(function(e) {
    life.nrows = parseInt($('#nrows').val());
    life.ncols = parseInt($('#ncols').val());
    life.pause();
    life.refresh();
    life.createCells();
    return life.drawCells();
  });

  $('#bl').blur(function(e) {
    if (!isNaN(parseInt($('#bl').val()))) {
      return life.bl = parseInt($('#bl').val());
    } else {
      return parseInt($('#bl').val(life.bl));
    }
  });

  $('#bh').blur(function(e) {
    if (!isNaN(parseInt($('#bh').val()))) {
      return life.bh = parseInt($('#bh').val());
    } else {
      return parseInt($('#bh').val(life.bh));
    }
  });

  $('#sl').blur(function(e) {
    if (!isNaN(parseInt($('#sl').val()))) {
      return life.sl = parseInt($('#sl').val());
    } else {
      return parseInt($('#sl').val(life.sl));
    }
  });

  $('#sh').blur(function(e) {
    if (!isNaN(parseInt($('#sh').val()))) {
      return life.sh = parseInt($('#sh').val());
    } else {
      return parseInt($('#sh').val(life.sh));
    }
  });

}).call(this);
